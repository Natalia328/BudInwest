"use strict";var yearOfExperience,yearOfExperience2,handleyearOfExperience;document.addEventListener("DOMContentLoaded",function(){var e,n=document.querySelector(".nav"),t=(document.querySelector(".nav__companyName"),document.querySelector(".nav__burger"),document.querySelector(".footer__year"));e=(new Date).getFullYear(),t.innerText=e;function o(){window.scrollY<=30&&!a.classList.contains("nav--active")&&n.classList.remove("shadow-bg")}var r=document.querySelector(".nav__burger"),a=document.querySelector(".nav__links"),c=document.querySelectorAll(".nav__link");r.addEventListener("click",function(){a.classList.toggle("nav--active"),n.classList.add("shadow-bg"),c.forEach(function(e){e.addEventListener("click",function(){a.classList.remove("nav--active"),o()})}),o()})}),-1<window.location.href.indexOf("projects.html")?(document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll(".project").forEach(function(e){var n=e.querySelector(".project-gallery");n&&tns({container:n,items:1,slideBy:"page",autoplay:!1,autoplayButtonOutput:!1,autoplayHoverPause:!0,controls:!0,nav:!1,prevButton:e.querySelector(".tns-prev"),nextButton:e.querySelector(".tns-next")})})}),document.addEventListener("DOMContentLoaded",function(){document.querySelector(".nav").classList.add("shadow-bg")})):(document.addEventListener("DOMContentLoaded",function(){tns({container:".slider",items:1,slideBy:"page",autoplay:!0,autoplayButtonOutput:!1,controls:!1,nav:!1})}),yearOfExperience=document.querySelector(".yearOfExperience"),yearOfExperience2=document.querySelector(".yearOfExperience2"),(handleyearOfExperience=function(){var e=(new Date).getFullYear()-2005;yearOfExperience.innerText=e,yearOfExperience2.innerText=e})(),document.addEventListener("DOMContentLoaded",function(){var e=document.querySelector(".nav");window.addEventListener("scroll",function(){30<=window.scrollY?e.classList.add("shadow-bg"):e.classList.remove("shadow-bg")})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiaXRlbXMiLCJ5ZWFyT2ZFeHBlcmllbmNlIiwieWVhck9mRXhwZXJpZW5jZTIiLCJoYW5kbGV5ZWFyT2ZFeHBlcmllbmNlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZm9vdGVyWWVhciIsIm5hdiIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lclRleHQiLCJ5ZWFyIiwibWFrZU5hdkJhclRyYW5zcGFyZW50Iiwic2hvd01lbnUiLCJzY3JvbGxZIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJtZW51IiwidG9nZ2xlIiwicmVtb3ZlIiwiYWxsTWVudUJ0bnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwicHJvamVjdHMiLCJmb3JFYWNoIiwicHJvamVjdCIsIml0ZW0iLCJidXJnZXJCdG5XaGl0ZSIsImhyZWYiLCJpbmRleE9mIiwic2xpZGVCeSIsImF1dG9wbGF5QnV0dG9uT3V0cHV0IiwiYXV0b3BsYXlIb3ZlclBhdXNlIiwiY29udHJvbHMiLCJ0bnMiLCJwcmV2QnV0dG9uIiwibmV4dEJ1dHRvbiIsImF1dG9wbGF5IiwiYWRkIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwid2luZG93Il0sIm1hcHBpbmdzIjoiYUE0RGdCQSxJQWtFTEMsaUJBQ0ZDLGtCQUNLQyx1QkFoSWRDLFNBQVNDLGlCQUFpQixtQkFBb0IsV0FDOUMsSUFXSUMsRUFYRUMsRUFBTUgsU0FBU0ksY0FBYyxRQU8zQkYsR0FSQ0QsU0FBaUJHLGNBQW9CLHFCQUN6QkEsU0FBQUEsY0FBckIsZ0JBT3FCSixTQUFTSSxjQUFjLGtCQUl4Q0YsR0FBV0csSUFBQUEsTUFBWUMsY0FGekJKLEVBQUFHLFVBQUFDLEVBZThCLFNBQXhCQyxJQU1BQyxPQUFRQyxTQUFSRCxLQUFBQSxFQUFpQkUsVUFBQUMsU0FBQSxnQkFDckJDLEVBQUtGLFVBQVVHLE9BQU8sYUFQeEIsSUFBTU4sRUFBQUEsU0FBd0JILGNBQXhCRyxnQkFFRkosRUFBSU8sU0FBVUksY0FBZCxlQUNEQyxFQUFBZixTQUFBZ0IsaUJBQUEsY0EyQkRDLEVBQVNDLGlCQUFpQkMsUUFqQmRELFdBQ1ZFLEVBQUFBLFVBQUtuQixPQUFBQSxlQUVITSxFQUFBQSxVQUFBQSxJQUFBQSxhQVZOUSxFQUFBRyxRQUFBLFNBQUFFLEdBUUlBLEVBQUtuQixpQkFBaUIsUUFBUyxXQU9uQ29CLEVBQUFBLFVBQWVwQixPQUFBQSxlQTlDakJNLFFBcURFUCxTQUs4QixFQUVoQkosT0FBQUEsU0FGZ0IwQixLQUFBQyxRQUFBLGtCQUdoQkMsU0FBQUEsaUJBSGdCLG1CQUFBLFdBSVJ4QixTQUpRZ0IsaUJBQUEsWUFLaEJTLFFBQUFBLFNBQW9CTixHQUNwQk8sSUFBQUEsRUFBQUEsRUFBa0J0QixjQU5GLG9CQU9oQnVCLEdBUGdCQyxJQUFBLENBU2hCQyxVQUFZVixFQUNoQlcsTUFBWVgsRUFWWkssUUFBQSxPQWFITyxVQUFBLEVBaEJMTixzQkFBQSxFQUZGQyxvQkFBQSxFQXFCT3pCLFVBQUFBLEVBQ0tELEtBQUFBLEVBQ1JVLFdBQWNTLEVBQWxCZixjQUFBLGFBRkYwQixXQUFBWCxFQUFBZixjQUFBLG1CQWVJUixTQUFBQSxpQkFGZSxtQkFBQSxXQUdSSSxTQUhRSSxjQUFBLFFBSWYyQixVQUFVQyxJQUpLLGlCQWlCZmhDLFNBQU1ELGlCQUFBQSxtQkFBQUEsV0FDUzZCLElBQUlLLENBQ2pCcEMsVUFBQUEsVUFDQUMsTUFBQUEsRUFIRjBCLFFBQUEsT0FiQU8sVUFBVSxFQW1CVmhDLHNCQUFzQixFQUd0QkMsVUFBU0MsRUFDUEUsS0FBTUEsTUFZRE4saUJBQUFHLFNBQUFJLGNBQUEscUJBQ0ZOLGtCQUFBRSxTQUFBSSxjQUFBLHVCQUNLTCx1QkFBa0IsV0FmNUIsSUFBQU8sR0FBQSxJQUFBMkIsTUFBQUMsY0FBQSxLQWtCSHJDLGlCQUFBUSxVQUFBQyxFQXhCS1Isa0JBQWtCTyxVQUFZQyxNQU1oQ04sU0FBU0MsaUJBQWlCLG1CQUFvQixXQUM1QyxJQUFNRSxFQUFNSCxTQUFTSSxjQUFjLFFBY2pDK0IsT0FBT2xDLGlCQUFpQixTQVR4QixXQUN3QixJQUFsQmtDLE9BQU8xQixRQUNUTixFQUFJTyxVQUFVc0IsSUFBSSxhQUdsQjdCLEVBQUlPLFVBQVVJLE9BQU8iLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbmNvbnN0IG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2XCIpO1xyXG5jb25zdCBuYXZDb21wYW55TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19jb21wYW55TmFtZVwiKTtcclxuY29uc3QgbmF2QnVyZ2VyV2hpdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdl9fYnVyZ2VyXCIpO1xyXG5cclxuXHJcbiAgLy8gZG9kYWplIGJpZcW8YWN5IHJvayBkbyBzdG9wa2lcclxuXHJcbiAgY29uc3QgZm9vdGVyWWVhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9vdGVyX195ZWFyXCIpO1xyXG5cclxuICBjb25zdCBoYW5kbGVDdXJyZW50WWVhciA9ICgpID0+IHtcclxuICAgIGNvbnN0IHllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBmb290ZXJZZWFyLmlubmVyVGV4dCA9IHllYXI7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlQ3VycmVudFllYXIoKTtcclxuXHJcblxyXG4gIC8vIHd5c3V3YSBtZW51IG5hIG1hxYJ5Y2ggZWtyYW5hY2hcclxuXHJcbiAgY29uc3QgYnVyZ2VyQnRuV2hpdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdl9fYnVyZ2VyXCIpO1xyXG5cclxuICBjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZfX2xpbmtzXCIpO1xyXG4gIGNvbnN0IGFsbE1lbnVCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXZfX2xpbmtcIik7XHJcblxyXG4gIGNvbnN0IG1ha2VOYXZCYXJUcmFuc3BhcmVudCA9ICgpID0+IHtcclxuICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA8PSAzMCAmJiAhbWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXYtLWFjdGl2ZVwiKSkge1xyXG4gICAgICBuYXYuY2xhc3NMaXN0LnJlbW92ZShcInNoYWRvdy1iZ1wiKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBzaG93TWVudSA9ICgpID0+IHtcclxuICAgIG1lbnUuY2xhc3NMaXN0LnRvZ2dsZShcIm5hdi0tYWN0aXZlXCIpO1xyXG4gICAgLy8gVG8gY2hlY2sgXHJcbiAgICBuYXYuY2xhc3NMaXN0LmFkZChcInNoYWRvdy1iZ1wiKTtcclxuXHJcbiAgICAvLyB1cCB0byBoZXJlXHJcblxyXG4gICAgYWxsTWVudUJ0bnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgbWVudS5jbGFzc0xpc3QucmVtb3ZlKFwibmF2LS1hY3RpdmVcIik7XHJcbiAgICAgICAgbWFrZU5hdkJhclRyYW5zcGFyZW50KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBtYWtlTmF2QmFyVHJhbnNwYXJlbnQoKTtcclxuICB9O1xyXG4gIGJ1cmdlckJ0bldoaXRlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzaG93TWVudSk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJ3Byb2plY3RzLmh0bWwnKSA+IC0xKSB7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgcHJvamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpO1xyXG4gICAgcHJvamVjdHMuZm9yRWFjaChmdW5jdGlvbihwcm9qZWN0KSB7XHJcbiAgICAgICAgdmFyIHNsaWRlciA9IHByb2plY3QucXVlcnlTZWxlY3RvcignLnByb2plY3QtZ2FsbGVyeScpO1xyXG4gICAgICAgIGlmIChzbGlkZXIpIHtcclxuICAgICAgICAgICAgdmFyIHRuc1NsaWRlciA9IHRucyh7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IHNsaWRlcixcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiAxLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVCeTogJ3BhZ2UnLFxyXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlCdXR0b25PdXRwdXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlIb3ZlclBhdXNlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbHM6IHRydWUsIFxyXG4gICAgICAgICAgICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHByZXZCdXR0b246IHByb2plY3QucXVlcnlTZWxlY3RvcignLnRucy1wcmV2JyksXHJcbiAgICAgICAgICAgIG5leHRCdXR0b246IHByb2plY3QucXVlcnlTZWxlY3RvcignLnRucy1uZXh0JylcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7XHJcbiAgY29uc3QgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZcIik7XHJcbiAgbmF2LmNsYXNzTGlzdC5hZGQoXCJzaGFkb3ctYmdcIik7XHJcbn1cclxuKVxyXG5cclxuXHJcblxyXG59IGVsc2Uge1xyXG5cclxuICAvLyBTbGlkZXIgbmEgZ8WCw7N3bmVqIHN0cm9uaWVcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHNsaWRlciA9IHRucyh7XHJcbiAgICBjb250YWluZXI6ICcuc2xpZGVyJyxcclxuICAgIGl0ZW1zOiAxLFxyXG4gICAgc2xpZGVCeTogJ3BhZ2UnLFxyXG4gICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICBhdXRvcGxheUJ1dHRvbk91dHB1dDogZmFsc2UsXHJcbiAgICBjb250cm9sczogZmFsc2UsXHJcbiAgICBuYXY6IGZhbHNlXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiAgICAvLyB6bWllbmlhIGlsZSBsYXQgZG/Fm3dpYWRjemVuaWFcclxuXHJcbiAgICBjb25zdCB5ZWFyT2ZFeHBlcmllbmNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi55ZWFyT2ZFeHBlcmllbmNlXCIpO1xyXG4gICAgY29uc3QgeWVhck9mRXhwZXJpZW5jZTIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnllYXJPZkV4cGVyaWVuY2UyXCIpO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZXllYXJPZkV4cGVyaWVuY2UgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgLSAyMDA1O1xyXG4gICAgICB5ZWFyT2ZFeHBlcmllbmNlLmlubmVyVGV4dCA9IHllYXI7XHJcbiAgICAgIHllYXJPZkV4cGVyaWVuY2UyLmlubmVyVGV4dCA9IHllYXI7XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgaGFuZGxleWVhck9mRXhwZXJpZW5jZSgpO1xyXG5cclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2XCIpO1xyXG4gICAgIFxyXG4gICAgICBcclxuICAgICAgICAvLyBkb2RhamUgY2llxYQgZG8gbmF3aWdhY2ppXHJcbiAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFNoYWRvdygpIHtcclxuICAgICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA+PSAzMCkge1xyXG4gICAgICAgICAgICBuYXYuY2xhc3NMaXN0LmFkZChcInNoYWRvdy1iZ1wiKTtcclxuICAgICAgXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBuYXYuY2xhc3NMaXN0LnJlbW92ZShcInNoYWRvdy1iZ1wiKTtcclxuICAgICAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGFkZFNoYWRvdyk7XHJcbiAgICAgIH0pXHJcbiAgICBcclxufSJdfQ==
